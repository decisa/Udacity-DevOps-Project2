Description: >
    Artem Telesh / Cloud DevOps Engineer Nanodegree
    Project 2.
Parameters:
    # whatever you consider a changing value, put it as a parameter instead of hard-coding it into your script
    EnvironmentName: 
        Description: Name of environment to prefix to resource names
        Type: String
    VpcCIDR:
        Description: IP range for this VPC
        Type: String
        Default: 10.0.0.0/16
    PubSubnet1CIDR:
        Description: IP range for public subnet in Availability Zone 1
        Type: String
        Default: 10.0.0.0/24
    PubSubnet2CIDR:
        Description: IP range for public subnet in Availability Zone 2
        Type: String
        Default: 10.0.1.0/24
    PrivateSubnet1CIDR:
        Description: IP range for private subnet in Availability Zone 1
        Type: String
        Default: 10.0.2.0/24
    PrivateSubnet2CIDR:
        Description: IP range for private subnet in Availability Zone 2
        Type: String
        Default: 10.0.3.0/24

Resources:
    VPC:
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: !Ref VpcCIDR
            EnableDnsHostnames: true
            Tags: 
                - Key: Name 
                  Value: !Ref EnvironmentName

    InternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
                - Key: Name
                  Value: !Ref EnvironmentName

    InternetGatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            InternetGatewayId: !Ref InternetGateway
            VpcId: !Ref VPC

    PublicSubnet1:
        # public subnet in AZ1
        Type: AWS::EC2::Subnet
        Properties:
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: !Ref PubSubnet1CIDR
            MapPublicIpOnLaunch: true
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Pub Subnet AZ1

    PublicSubnet2:
        # public subnet in AZ2
        Type: AWS::EC2::Subnet
        Properties:
            AvailabilityZone: !Select [ 1, !GetAZs '' ]
            CidrBlock: !Ref PubSubnet2CIDR
            MapPublicIpOnLaunch: true
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Pub Subnet AZ2

    PrivateSubnet1:
        #private subnet in AZ1, where we will have 2 of our instances
        Type: AWS::EC2::Subnet
        Properties:
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: !Ref PrivateSubnet1CIDR
            MapPublicIpOnLaunch: false
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Private Subnet AZ1

    PrivateSubnet2:
        # private subnet in AZ2, where we will have 2 of our instances
        Type: AWS::EC2::Subnet
        Properties:
            AvailabilityZone: !Select [ 1, !GetAZs '' ]
            CidrBlock: !Ref PrivateSubnet2CIDR
            MapPublicIpOnLaunch: false
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Private Subnet AZ2

    # now that we have subnets created, need to add NAT gateways inside public subnets. we need to assign elastic IP for them first
    # which in turn  depends on internet gateway

    NatGatewayEIP1:
        Type: AWS::EC2::EIP
        Properties:
            Domain: vpc
        DependsOn: InternetGatewayAttachment 

    NatGatewayEIP2:
        Type: AWS::EC2::EIP
        Properties:
            Domain: vpc
        DependsOn: InternetGatewayAttachment
    
    NatGateway1:
        Type: AWS::EC2::NatGateway
        Properties:
            AllocationId: !GetAtt NatGatewayEIP1.AllocationId
            SubnetId: !Ref PublicSubnet1
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Nat Gateway for Public Subnet 1

    NatGateway2:
        Type: AWS::EC2::NatGateway
        Properties:
            AllocationId: !GetAtt NatGatewayEIP2.AllocationId
            SubnetId: !Ref PublicSubnet2
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Nat Gateway for Public Subnet 2

    # TODO:
    # create route table
    # create route (rule) to send all traffic to internet gateway and assign to route table
    # associate route table with pub subnet 1 and pub subnet 2

    PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Public Route Table

    DefaultPublicRoute:
        Type: AWS::EC2::Route
        DependsOn: InternetGatewayAttachment
        Properties:
            GatewayId: !Ref InternetGateway
            DestinationCidrBlock: 0.0.0.0/0
            RouteTableId: !Ref PublicRouteTable
    
    PublicSubnet1RouteAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId: !Ref PublicSubnet1
            RouteTableId: !Ref PublicRouteTable

    PublicSubnet2RouteAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId: !Ref PublicSubnet2
            RouteTableId: !Ref PublicRouteTable

    # create route table for priv subnet 1
    # create rule to send all trafic to NAT1 gateway
    # associate route table with priv subnet 1

    PrivateRouteTable1:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} route table for private subnet 1

    DefaultPrivateRoute1:
        Type: AWS::EC2::Route
        DependsOn: InternetGatewayAttachment
        Properties: 
            NatGatewayId: !Ref NatGateway1
            DestinationCidrBlock: 0.0.0.0/0
            RouteTableId: !Ref PrivateRouteTable1

    PrivateSubnet1RouteAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId: !Ref PrivateSubnet1
            RouteTableId: !Ref PrivateRouteTable1

    # same thing for private subnet 2
    PrivateRouteTable2:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} route table for private subnet 2

    DefaultPrivateRoute2:
        Type: AWS::EC2::Route
        DependsOn: InternetGatewayAttachment
        Properties: 
            NatGatewayId: !Ref NatGateway2
            DestinationCidrBlock: 0.0.0.0/0
            RouteTableId: !Ref PrivateRouteTable2

    PrivateSubnet2RouteAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId: !Ref PrivateSubnet2
            RouteTableId: !Ref PrivateRouteTable2

    #instace profile contains the IAM Role name(s) that we want to associate to our auto scaling EC2 Servers
    # ProfileWithRolesForOurApp:
    #     Type: AWS::IAM::InstanceProfile
    #     Properties: 
    #         Roles:
    #             - UdacityS3ReadOnlyEC2
  
            # #!/bin/bash
            # apt-get update -y
            # apt-get install unzip awscli -y
            # apt-get install apache2 -y
            # systemctl start apache2.service
            # cd /var/www/html
            # aws s3 cp s3://udacity-demo-1/udacity.zip .
            # unzip -o udacity.zip
# Outputs: 
    #Bonus points for useful outputs!