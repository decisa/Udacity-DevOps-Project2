Description: >
    Artem Telesh / Cloud DevOps Engineer Nanodegree
    Project 2.
Parameters:
    # whatever you consider a changing value, put it as a parameter instead of hard-coding it into your script
    EnvironmentName:
        Description: Name of environment to prefix to resource names
        Type: String

Resources:
    LBSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow HTTP traffic to Load Balancer
            SecurityGroupIngress: 
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              CidrIp: 0.0.0.0/0
            SecurityGroupEgress: 
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              CidrIp: 0.0.0.0/0
            VpcId: 
                Fn::ImportValue:
                    !Sub ${EnvironmentName}-VpcId
            Tags: 
                - Key: Name
                  Value: !Sub ${EnvironmentName} Load Balancer SecurityGroup

    WebServerSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow HTTP and SSH traffic to Servers
            SecurityGroupIngress:
            - IpProtocol: tcp  # allow inbound HTTP traffic
              FromPort: 80
              ToPort: 80
              CidrIp: 0.0.0.0/0
            # - IpProtocol: tcp  # allow inbound SSH traffic
            #   FromPort: 22
            #   ToPort: 22
            #   CidrIp: 10.0.0.0/16 # shoudl I limit to only my IP?
            SecurityGroupEgress:
            - IpProtocol: tcp
              FromPort: 0
              ToPort: 65535
              CidrIp: 0.0.0.0/0
            VpcId: 
                Fn::ImportValue:
                    !Sub ${EnvironmentName}-VpcId
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Web Servers Security Group

    S3ReadOnlyRole:
        Type: AWS::IAM::Role
        Properties: 
            Description: Role to allow read access to S3 buckets
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                  - Effect: Allow
                    Principal:
                        Service:
                          - ec2.amazonaws.com
                    Action:
                      - 'sts:AssumeRole'
            Path: /
            Policies:
              - PolicyName: AmazonS3ReadOnlyAccess
                PolicyDocument:
                    Version: 2012-10-17
                    Statement:
                      - Effect: Allow
                        Action:
                          - s3:Get*
                          - s3:List*
                        Resource: '*'
            RoleName: EC2-S3-ReadOnly
            Tags: 
              - Key: Name
                Value: !Sub ${EnvironmentName}-EC2-S3-ReadOnly Role

    S3ReadOnlyProfile:
        Type: AWS::IAM::InstanceProfile
        Properties: 
            InstanceProfileName: !Sub ${EnvironmentName}-Servers-S3-Access-Profile
            Roles: 
              - !Ref S3ReadOnlyRole

    LaunchConfig:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties: 
            AssociatePublicIpAddress: false
            BlockDeviceMappings: 
                - DeviceName: /dev/sdk
                  Ebs:
                    VolumeSize: 10
                    VolumeType: gp2
            IamInstanceProfile: !Ref S3ReadOnlyProfile
            ImageId: ami-003634241a8fcdec0 # Ubuntu 18
            # InstanceMonitoring: Boolean
            # InstanceType: t2.medium # 2vCPU 4Gb Ram. I picked this instance type
            InstanceType: t3.small # this instance type is recommended in rubric
            #  Key pair for EC2 SSH access
            # KeyName: UdacityProject2-PrivateKey 
            SecurityGroups: [ !Ref WebServerSecurityGroup ]
            UserData:
                Fn::Base64: !Sub |
                    #!/bin/bash
                    apt-get update -y
                    apt-get install unzip awscli -y
                    apt-get install apache2 -y
                    systemctl start apache2.service
                    cd /var/www/html
                    aws s3 cp s3://udacity-demo-1/udacity.zip .
                    unzip -o udacity.zip

    AutoScaleGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            AutoScalingGroupName: !Sub ${EnvironmentName}-WebApp-AutoScaling-Group
            # Will need to set up healthchecks. can add grace period in seconds before initial check
            HealthCheckGracePeriod: 60
            # HealthCheckType: String
            LaunchConfigurationName: !Ref LaunchConfig
            MaxSize: 6
            MinSize: 4
            Tags: 
                - Key: Name
                  PropagateAtLaunch: false
                  Value: !Sub ${EnvironmentName} Web App AutoScaling group
            TargetGroupARNs: [ !Ref WebAppTargetGroup ]
            VPCZoneIdentifier: 
                - Fn::ImportValue:
                    !Sub ${EnvironmentName}-PrvSNets

    ELB:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties: 
            IpAddressType: ipv4
            Name: !Sub ${EnvironmentName}-App-ELB
            Scheme: internet-facing
            SecurityGroups: [ !Ref LBSecurityGroup ]
            Subnets: 
                Fn::Split:
                - ","
                - Fn::ImportValue:
                    !Sub ${EnvironmentName}-PubSNets
            Tags: 
                - Key: Name
                  Value: !Sub ${EnvironmentName}-Elastic-Load-Balancer
            Type: application

    Listener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            DefaultActions:
                - Type: forward
                  TargetGroupArn: !Ref WebAppTargetGroup
            LoadBalancerArn: !Ref ELB
            Port: '80'
            Protocol: HTTP

    ListenerRule1:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            Actions:
                - Type: forward
                  TargetGroupArn: !Ref 'WebAppTargetGroup'
            Conditions:
                - Field: path-pattern
                  Values: [/]
            ListenerArn: !Ref 'Listener'
            Priority: 1

    WebAppTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            HealthCheckIntervalSeconds: 35
            HealthCheckPath: /
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 30
            HealthyThresholdCount: 2
            Port: 80
            Protocol: HTTP
            UnhealthyThresholdCount: 5
            Name: !Sub ${EnvironmentName}-ELB-TargetGroup
            TargetGroupAttributes:
                - Key: slow_start.duration_seconds
                  Value: 60
            VpcId: 
                Fn::ImportValue:
                    !Sub ${EnvironmentName}-VpcId


Outputs:
    URL:
        Description: Load balancer address
        Value: !Join [ "", [ "http://" , !GetAtt ELB.DNSName ]]
        Export:
            Name: !Sub ${EnvironmentName}-LB-Url

